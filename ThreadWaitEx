import java.util.ArrayList;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
//Ex1로부터 개선된 것. 
class Customer implements Runnable{
	private Table table;
	private String food;
	
	Customer(Table table, String food){
		this.table = table;
		this.food = food;
	}
	
	public void run() {
		while(true) {
			try { Thread.sleep(1000); } catch(InterruptedException e) {}
			String name = Thread.currentThread().getName();
			
			table.remove(food);
			System.out.println(name + " ate a " + food);
		}
	}
}

class Cook implements Runnable{
	private Table table;
	
	Cook(Table table) { this.table = table; }
	
	public void run() {
		while(true) {
			int idx = (int)(Math.random()*table.dishNum());
			table.add(table.dishNames[idx]);
			try { Thread.sleep(10); } catch(InterruptedException e) {}
		}
	}
}

class Table {
	String[] dishNames = { "donut", "donut", "burger" };
	final int MAX_FOOD = 6;
	private ArrayList<String> dishes = new ArrayList<>();
	
	private ReentrantLock lock = new ReentrantLock();
	private Condition forCook = lock.newCondition();
	private Condition forBurger = lock.newCondition();
	private Condition forDonut = lock.newCondition();
	
	public void add(String dish) {
		lock.lock();
		
		try {
			while(dishes.size()>=MAX_FOOD) {
				String name = Thread.currentThread().getName();
				System.out.println(name + " is waiting.");
				try {
					forCook.await(); 
				} catch(InterruptedException e) {} 
			}
			if(dish.equals("donut")) {
				dishes.add(dish);
				forDonut.signal();
				System.out.println("Dishes:" + dishes.toString());
			} else {
				dishes.add(dish);
				forBurger.signal();
				System.out.println("Dishes:" + dishes.toString());
			}
		} finally {
			lock.unlock();
		}
	}
	
	public void remove(String dishName) {
		lock.lock();
		String name = Thread.currentThread().getName();
		
		try {
			while(dishes.size() == 0) {
				System.out.println(name + " is waiting.");
				try {
					if(dishName.equals("donut"))
						forDonut.await(); // 음식이 없으니 난 자러간닷 lock은 다른 데에 두고 갈게 기다렷.
					else
						forBurger.await();
				} catch(InterruptedException e) {}
			}
			while(true) {
				for(int i = 0; i < dishes.size(); i++) { //원하는 음식이 있으면  먹은 후 return, 없으면 기다리러 간닷.
					if(dishName.equals(dishes.get(i))){
						dishes.remove(i);
						forCook.signal();
						return;
					}
				}
				
				try {
					System.out.println(name + " is waiting.");
					if(dishName.equals("donut"))
						forDonut.await();
					else
						forBurger.await();
				} catch(InterruptedException e) {}
			}
		} finally {
			lock.unlock();
		}
	}
	
	public int dishNum() { return dishNames.length; }
}

public class ThreadWaitEx4 {
	public static void main(String[] args) throws Exception {
		Table table = new Table();
		
		new Thread(new Cook(table), "COOK1").start();
		new Thread(new Customer(table, "donut"), "CUST1").start();
		new Thread(new Customer(table, "burger"), "CUST2").start();
		
		Thread.sleep(2000);
		System.exit(0);	
	}
}

//이후에 어떤 메뉴를 먹으려는 인원 수에 맞게 그것의 개수가 만들어졌는지 확인하는 코드가 있어야 할 것이다.
//근데 이러면 기아현상은 막을 수 있지만, 오래 기다리게 되는 사람도 있겠네. 그럼 요리사를 늘려야 하나? 


/*
try {
	while(dishes.size()>=MAX_FOOD) {
		String name = Thread.currentThread().getName();
		System.out.println(name + " is waiting.");
		try {
			forCook.await(); // 테이블이 가득 찼으니 쉬러 간닷! 신호 기다릴게! 
			Thread.sleep(500); // 깨자마자 0.5초 일시정지. 왜냐면, Cust측에서 Cook에 신호주고, 자기도 자러 갈 준비하느라. 
		} catch(InterruptedException e) {} 
	}
	
	dishes.add(dish);
	forCust.signal(); // 음식을 추가하면 손님들한테 신호를 보낸다. 
	System.out.println("Dishes:" + dishes.toString());
} finally {
	lock.unlock(); //비로소 Cook이 lock을 해지한다. 
}*/
